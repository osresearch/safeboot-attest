#!/bin/bash
# safeboot-attest: TPM2 Remote Attestation
#
# This wraps the low level `tpm2-tools` programs into a fairly turn-key
# remote attestation system to allow a client to use the TPM2 to prove to
# a server that the PCRs are in a given state, and to then receive a
# sealed secret that can only be decrypted if the system is still in
# that state.
#
# The external programs used are:
# xxd, mktemp, tpm2, rm, date printf cp, curl, dd, openssl, cat
#
# For more info: https://safeboot.dev/attestation/
#
# turn off "expressions don't expand in single quotes"
# and "can't follow non-constant sources"
# shellcheck disable=SC2016 disable=SC1090
set -e -o pipefail
export LC_ALL=C

die() { echo >&2 "FATAL: $*" ; exit 1 ; }

if [ "$Q" == 1 ]; then
	info() { true ; }
	warn() { true ; }
else
	warn() { echo >&2 "WARNING: $*" ; }
	info() { echo >&2 "$*" ; }
fi

if [ "$V" == 1 ]; then
	debug() { info "$@" ; }
	QUIET=""
else
	debug() { true ; }
	QUIET="--quiet"
fi

TMP=$(mktemp -d)
cleanup() {
	rm -rf "$TMP"
}

trap cleanup EXIT

tpm2_flushall() {
	debug "tpm2: flushing contexts"

	tpm2 flushcontext \
		--transient-object \
	|| die "tpm2_flushcontext: unable to flush transient handles"

	tpm2 flushcontext \
		--loaded-session \
	|| die "tpm2_flushcontext: unable to flush sessions"

	tpm2 flushcontext \
		--saved-session \
	|| die "tpm2_flushcontext: unable to flush saved session"
}

tpm2_secret_session()
{
	SESSION="${1:-$TPM/session.ctx}"

	tpm2_flushall

	debug "tpm2: starting secret session $SESSION"

	tpm2 startauthsession >&2 \
		$QUIET \
		--session "$SESSION" \
		--policy-session  \
	|| die "tpm2_startauthsession: unable to start authenticated session"

	# context is TPM_RH_ENDORSEMENT because why would you want names?
	tpm2 policysecret >&2 \
		$QUIET \
		--session "$SESSION" \
		--object-context "endorsement" \
	|| die "tpm2_policysecret: unable to set context TPM_RH_ENDORSEMENT"
}

quote()
{
	QUOTE_FILES=()
	QUOTE_PCRS="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16"

	tpm2_flushall

	# read the key in RSA PEM format for openssl compatability
	info "tpm2: reading endorsement key"
	tpm2 createek >&2 \
		--ek-context "$TMP/ek.ctx" \
		--key-algorithm "rsa" \
		--format "PEM" \
		--public "$TMP/ek.pub" \
	|| die "tpm2_createek: unable to retrieve endorsement key"
	QUOTE_FILES+=("ek.pub")

	# this public key is generated each time and includes the
	# `stclear` attribute so that it can not be persistent
	# and it will not be valid after a reboot.
	#
	# The much simpler `tpm2_createak` could have been used,
	# except that it makes persistent attestation keys, which
	# would allow an attacker to reboot the machine into an
	# untrusted state and unseal the response from the attestation
	# server.
	#
	# tpm2_createak >&2 \
	#	--ek-context "$TMP/ek.ctx" \
	#	--ak-context "ak.ctx" \
	#	--public "$TMP/ak.pem" \
	#	--format "pem" \
	#|| die "tpm2_createak: unable to create attestation key"

	tpm2_secret_session "$TMP/session.ctx"

	info "tpm2: creating ephemeral attestation key"
	tpm2 create >&2 \
		$QUIET \
		--parent-context "$TMP/ek.ctx" \
		--parent-auth "session:$TMP/session.ctx" \
		--key-algorithm "ecc:ecdsa:null" \
		--attributes "fixedtpm|fixedparent|sensitivedataorigin|userwithauth|restricted|sign|stclear" \
		--public "$TMP/ak-pub.key" \
		--private "$TMP/ak-priv.key" \
	|| die "tpm2_create: unable to create an attestation key"

	# have to start a new secret session to load the attestation key
	tpm2_secret_session "$TMP/session.ctx"
	tpm2 load >&2 \
		$QUIET \
		--parent-context "$TMP/ek.ctx" \
		--auth "session:$TMP/session.ctx" \
		--key-context "$TMP/ak.ctx" \
		--public "$TMP/ak-pub.key" \
		--private "$TMP/ak-priv.key" \
	|| die "tpm2_load: unable to load attestation key"

	# read the public component so that the name can be
	# computed with sha256 by the server
	tpm2 readpublic >&2 \
		$QUIET \
		--object-context "$TMP/ak.ctx" \
		--output "$TMP/ak.pub" \
		--format "tpmt" \
	|| die "tpm2_readpublic: unable to display info"
	QUOTE_FILES+=("ak.pub")

	tpm2 flushcontext --transient-object

	QUOTE_TIME="$(date '+%s')"
	QUOTE_NONCE="$(printf '%08x' "$QUOTE_TIME")"
	echo -n "$QUOTE_NONCE" > "$TMP/nonce" \
	|| die "$TMP/nonce: unable to create"
	QUOTE_FILES+=("nonce")

	# get a quote using this attestation key
	tpm2_flushall ""
	info "tpm2: generating quote $QUOTE_NONCE"
	tpm2 quote >&2 \
		$QUIET \
		--key-context "$TMP/ak.ctx" \
		--pcr-list "sha256:$QUOTE_PCRS" \
		--qualification "$QUOTE_NONCE" \
		--message "$TMP/quote" \
		--signature "$TMP/sig" \
		--pcr "$TMP/pcr" \
	|| die "tpm2_quote: unable to generate quote"
	QUOTE_FILES+=("quote")
	QUOTE_FILES+=("sig")
	QUOTE_FILES+=("pcr")

	# Include the TPM event log and Linux IMA log if they exists
	EVENTLOG="/sys/kernel/security/tpm0/binary_bios_measurements"
	IMALOG="/sys/kernel/security/ima/ascii_runtime_measurements"

	if [ -r "$EVENTLOG" ]; then
		debug "attest: including eventlog $EVENTLOG"
		QUOTE_FILES+=("eventlog")
		cp \
			"$EVENTLOG" \
			"$TMP/eventlog" \
		|| die "$EVENTLOG: unable to copy"
	else
		warn "eventlog $EVENTLOG not present"
	fi

	if [ -r "$IMALOG" ]; then
		debug "attest: including imalog $IMALOG"
		QUOTE_FILES+=("imalog")
		cp \
			"$IMALOG" \
			"$TMP/imalog" \
		|| die "$IMALOG: unable to copy"
	fi
}


send_quote()
{
	SERVER="$1"
	shift

	# convert them into form arguments for the curl command
	for file in "${QUOTE_FILES[@]}"; do
		FORM_ARGS+=("--form" "$file=@$TMP/$file")
	done

	debug "tpm2: validating quote before sending"

	tpm2 checkquote \
		$QUIET \
		--qualification "$(cat "$TMP/nonce")" \
		--message "$TMP/quote" \
		--signature "$TMP/sig" \
		--pcr "$TMP/pcr" \
		--public "$TMP/ak.pub" \
		1>&2 \
	|| warn "could not verify own quote. uh oh"

	info "attest: sending quote to $SERVER"

	curl \
		-X POST \
		--fail \
		--silent \
		"${FORM_ARGS[@]}" \
		"$SERVER" \
	|| die "attestation failed"
}

# credential.bin has a sealed secret for us
# this assumes that the EK and AK are still present in $TMP
# the file format that is returned is a simple concatenation of:
#
# 328 bytes tpm2 credential blob, containing 64 bytes of secret
# 32 bytes of hmac of the encrypted data
# any number of bytes of data
#
# the unsealed secret has
# 32 bytes of AES key
# 16 bytes of AES IV
# 16 bytes of HMAC key
#
unseal()
{
	REPLY="$1"

	info "attest: unsealing response"

	dd if="$REPLY" of="$TMP/cred.blob" bs=16 skip=0 count=23 2>&-
	dd if="$REPLY" of="$TMP/hmac.bin" bs=16 skip=23 count=2 2>&-
	dd if="$REPLY" of="$TMP/cipher.bin" bs=16 skip=25 2>&-

	tpm2_secret_session "$TMP/session.ctx"

	tpm2 activatecredential \
		$QUIET \
		--credentialedkey-context "$TMP/ak.ctx" \
		--credentialkey-context "$TMP/ek.ctx" \
		--credentialkey-auth "session:$TMP/session.ctx" \
		--credential-blob "$TMP/cred.blob" \
		--certinfo-data "$TMP/secret.key" \
		1>&2 \
	|| die "tpm2_activatecredential: unable to unseal key"

	# split the secret.key into AES key and IV,
	dd if="$TMP/secret.key" bs=16 skip=0 count=2 of="$TMP/aes.key" 2>&-
	dd if="$TMP/secret.key" bs=16 skip=2 count=1 of="$TMP/aes.iv" 2>&-
	dd if="$TMP/secret.key" bs=16 skip=3 count=1 of="$TMP/hmac.key" 2>&-

	# validate the hmac on the reply
	debug "openssl: validating reply"

	openssl dgst \
		-sha256 \
		-binary \
		-mac hmac \
		-macopt hexkey:"$(xxd -p -c128 "$TMP/hmac.key")" \
		-out "$TMP/hmac.out" \
		"$TMP/cipher.bin" \
	|| die "unable to hmac reply"

	if ! cmp --quiet "$TMP/hmac.out" "$TMP/hmac.bin" ; then
		die "hmac failed"
	fi

	# hmac validated, so the encrypted data should be
	# safe to decrypt with the session key, writing to stdout
	debug "openssl: decrypting reply"

	openssl enc \
		-d \
		-aes-256-cbc \
		-iv "$(xxd -p -c128 "$TMP/aes.iv")" \
		-K "$(xxd -p -c128 "$TMP/aes.key")" \
		-in "$TMP/cipher.bin" \
	|| die "unable to decrypt reply"
}


SERVER="$1"
if [ -z "$SERVER" ]; then
	die "Usage: $0 server-url > secret.bin"
fi

quote || die "quote failed"
send_quote "$SERVER" > "$TMP/credential.bin" || die "curl failed"
unseal "$TMP/credential.bin" || die "unseal failed"

exit 0
