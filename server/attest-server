#!/usr/bin/python3

"""
Quote and Eventlog validating Attestation Server.

This is a python flask server implementing a single API end-point on /, which
expects a POST request encoded in conventional form (multipart/form-data) that
includes a fields for the `quote` over the `pcr` values, the `sig` on the
quote by the `ak.pub` along with the one-time `nonce` value. Optionally 
it can include the `eventlog` and `imalog` for more granular decoding of events.

To use from 'curl', you would;
  curl -X -POST -F quote=@"quote.bin" ... <URL>

The API performs three actions:

* Validates that the Quote is signed by the AK with the provided nonce over the provided PCR values.
* Validates that the PCR extensions in the Eventlog produce the PCR values in the quote for every quoted PCR.

It then invokes an external handler to verify that the eventlog
meets the policy requirements, and will return any output from this
handler to the attesting machine.

"""
import flask
from flask import request, abort, send_file
import subprocess
import os, sys
from stat import *
import tempfile
import logging
import yaml
import hashlib
from Crypto.Hash import SHA256, HMAC
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad


bindir = os.environ.get('BINDIR')
if not bindir:
    bindir = '.'

ak_type = "fixedtpm|stclear|fixedparent|sensitivedataorigin|userwithauth|restricted|sign"

def validate_ak(ak_file):
    sub = subprocess.run([
	"tpm2", "print",
	"--type", "TPMT_PUBLIC",
	ak_file
    ],
	stdout=subprocess.PIPE,
	stderr=sys.stderr,
    )

    if sub.returncode != 0:
      print("unable to parse AK")
      return None

    # The output contains YAML description of the attestation key
    ak = yaml.safe_load(sub.stdout)
    if not "attributes" in ak \
    and not "value" in ak["attributes"]:
      print("unable to parse AK")
      return None

    if ak["attributes"]["value"] != ak_type:
      print("bad AK type", ak["attributes"]["value"])
      return None

    return ak


def validate_quote(nonce,quote,sig,pcr,ak):
    # use the tpm2 checkquote to validate the signature on the quote,
    # the PCRs in the quote, and the one time nonce used for liveliness
    # todo: use a signed nonce? timestamp?
    sub = subprocess.run([
	"tpm2", "checkquote",
	"--qualification", nonce,
	"--message",	quote,
	"--signature",	sig,
	"--pcr",	pcr,
	"--public",	ak,
    ],
	stdout=subprocess.PIPE,
	stderr=sys.stderr,
    )

    if sub.returncode != 0:
      return None

    # The output contains YAML formatted list of PCRs
    return yaml.safe_load(sub.stdout)

def validate_eventlog(quote, eventlog_filename):
    sub = subprocess.run([
	"tpm2", "eventlog",
	eventlog_filename,
    ],
	stdout=subprocess.PIPE,
	stderr=sys.stderr,
    )
    if sub.returncode != 0:
      return None

    eventlog = yaml.safe_load(sub.stdout)
    if not "pcrs" in eventlog:
      print("no PCRs in eventlog?")
      return None

    # validate that the eventlog pcrs match the quote pcrs
    # note that an attacker might have removed some of the events;
    # this only checks that the event log entries correspond to
    # the resulting pcrs, but not that every pcr has eventlog entries.
    for alg in quote["pcrs"]:
      quote_pcrs = quote["pcrs"][alg]
      if not alg in eventlog["pcrs"]:
        print("no " + alg + " PCRs in eventlog?")
        abort (403, "INVALID_EVENTLOG_ALG:" + alg)
      eventlog_pcrs = eventlog["pcrs"][alg]

      for pcr in quote_pcrs:
        if not pcr in eventlog_pcrs:
          # not an error; might have happened *after* the eventlog
          # was closed by ExitBootServices
          continue
        ev = eventlog_pcrs[pcr];
        qv = quote_pcrs[pcr]
        if ev != qv:
          print("inconsistent " + alg + ":" + str(pcr) + "=" + qv + " != " + ev)
          return None

    return eventlog

# now ask the verifier to process the eventlog and decide
# if the eventlog meets policy for this ekhash.
# This is where the actual business logic happens; the other
# steps have purely been validating the the quote is well formed, etc.
def verify_quote(ek_hash, tmpdir):
    sub = subprocess.run([
	bindir + "/attest-verify",
	"verify",
	ek_hash,
	tmpdir
    ],
	stdout=subprocess.PIPE,
	stderr=sys.stderr,
    )

    if sub.returncode != 0:
        print(ek_hash + ": attest-verify failed")
        return None

    # read the (binary) response from the sub process stdout
    reply = sub.stdout
    return reply


def seal_secret(secret, tmpdir, ak_hash, ek_filename):
    # create an ephemeral session key, IV and HMAC key
    aes_key = get_random_bytes(32)
    aes_iv = get_random_bytes(16)
    hmac_key = get_random_bytes(16)

    # create the session key file that concatenates the
    # AES key, IV and hmac key. 64-bytes is the maximum
    # allowed with tpm2
    secret_filename = os.path.join(tmpdir, "secret.bin")
    with open(secret_filename, "wb") as f:
      f.write(aes_key + aes_iv + hmac_key)

    # and now seal it with the AK/EK into a credential blob
    cred_filename = os.path.join(tmpdir, "credential.blob")
    sub = subprocess.run([
	"tpm2", "makecredential",
	"--quiet",
	"--tcti", "none",
	"--secret", secret_filename,
	"--encryption-key", ek_filename,
	"--key-algorithm", "rsa",
	"--name", "000b" + ak_hash,
        "--credential-blob", cred_filename,
    ],
	stdout=subprocess.PIPE,
	stderr=sys.stderr,
    )

    if sub.returncode != 0:
      print(ek_hash + ": makecredential failed?", file=sys.stderr)
      return None

    # use the AES key and IV to encrypt the secret data
    enc = AES.new(aes_key, AES.MODE_CBC, iv=aes_iv)
    cipher = enc.encrypt(pad(secret, AES.block_size))

    # compute the HMAC on the encrypted secret data
    hmac = HMAC.new(key=hmac_key, msg=cipher, digestmod=SHA256).digest()

    # append the hmac and cipher text to the cred file
    with open(cred_filename, "ab") as f:
      f.write(hmac)
      f.write(cipher)

    return cred_filename


# The flask details;

app = flask.Flask(__name__)
app.config["DEBUG"] = True

@app.route('/', methods=['GET'])
def home_get():
    abort(405)

@app.route('/', methods=['POST'])
def home_post():
#  try:
    # at a minimum there must be:
    required=('quote', 'sig', 'pcr', 'nonce', 'ak.pub', 'ek.pub')

    for f in required:
      if f not in request.files:
          print(f, " not present in form data")
          abort(403)

    # Create a temporary directory for the quote file, and make it world
    # readable+executable. (This gets garbage collected after we're done, as do
    # any files we put in there.) We may priv-sep the python API from the
    # underlying safeboot routines at some point, by running the latter behind
    # sudo as another user, so this ensures it would be able to read the quote
    # file.
    tf = tempfile.TemporaryDirectory()
    s = os.stat(tf.name)
    os.chmod(tf.name, s.st_mode | S_IROTH | S_IXOTH)

    # store the required files in variables, as well as into the directory
    files = {}
    for f in required:
      files[f] = request.files[f].read()
      with open(os.path.join(tf.name, f), "wb") as fd:
        fd.write(files[f])

    ek_filename = os.path.join(tf.name, "ek.pub")
    ek_hash = SHA256.new(files["ek.pub"]).hexdigest()
    ak_hash = SHA256.new(files["ak.pub"]).hexdigest()

    # check that the AK meets our requirements
    if not validate_ak(os.path.join(tf.name, "ak.pub")):
      print(ek_hash + ": bad AK")
      abort (403, "BAD_AK")

    quote = validate_quote(
	nonce		= files["nonce"],
	quote		= os.path.join(tf.name, "quote"),
	sig		= os.path.join(tf.name, "sig"),
	pcr		= os.path.join(tf.name, "pcr"),
	ak		= os.path.join(tf.name, "ak.pub"),
    )
    if not quote:
      print(ek_hash + ": bad quote")
      abort (403, "BAD_QUOTE")

    # verify that the eventlog, if present matches
    if "eventlog" not in request.files:
      # todo: allow server configuration for this
      print(ek_hash + ": missing eventlog!")
      #abort (403, "MISSING_EVENTLOG")
    else:
      eventlog_filename = os.path.join(tf.name, "eventlog")
      request.files["eventlog"].save(eventlog_filename)
      eventlog = validate_eventlog(quote, eventlog_filename)
      if not eventlog:
        abort (403, "BAD_EVENTLOG")

    # the quote, eventlog and PCRS are consistent,
    print(ek_hash + ": valid quote and eventlog")

    reply = verify_quote(ek_hash, tf.name)
    if not reply:
        abort(403, "verify failed")

    print(ek_hash + ": attest_verify passed, %d bytes to send" % (len(reply)))

    sealed_filename = seal_secret(
	secret		= reply,
	tmpdir		= tf.name,
	ak_hash		= ak_hash,
	ek_filename	= os.path.join(tf.name, "ek.pub"),
    )

    print(ek_hash + ": sealed into", sealed_filename)

    if not sealed_filename:
      print(ek_hash + ": secret sealing failed")
      abort(500, "sealing failed")

    return send_file(sealed_filename)
#  except Exception as e:
#    print(e)

if __name__ == "__main__":
    app.run()
